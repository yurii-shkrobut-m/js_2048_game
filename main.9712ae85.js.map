{"version":3,"sources":["scripts/main.js"],"names":["rowsNum","columnsNum","handler","score","best","field","cells","document","querySelectorAll","rows","button","querySelector","messageStart","messageLose","messageWin","counter","bestResult","filterZero","row","filter","el","hasEmptyCell","some","checkWin","random","Math","floor","hasAdjacentTiles","i","j","generateRandomNum","rowIndex","cellIndex","value","cell","children","textContent","classList","add","updateTable","forEach","className","length","k","slide","copy","push","slideLeft","slideRight","reverse","fieldCombine","num","r","slideUp","slideDown","addEventListener","contains","fill","e","preventDefault","key","remove"],"mappings":"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","file":"main.9712ae85.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst rowsNum = 4;\nconst columnsNum = 4;\nlet handler = false;\nlet score = 0;\nlet best = 0;\n\nconst field = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst cells = document.querySelectorAll('.field-cell');\nconst rows = document.querySelectorAll('.field-row');\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst counter = document.querySelector('.game-score');\nconst bestResult = document.querySelector('.game-best');\n\nconst filterZero = (row) => row.filter(el => el !== 0);\nconst hasEmptyCell = () => field.some(row => row.some(el => el === 0));\nconst checkWin = () => field.some(row => row.some(el => el === 2048));\nconst random = () => Math.floor(Math.random() * 4);\n\nfunction hasAdjacentTiles() {\n  for (let i = 0; i < rowsNum; i++) {\n    for (let j = 0; j < columnsNum; j++) {\n      if (j < columnsNum - 1 && field[i][j] === field[i][j + 1]) {\n        return true;\n      }\n\n      if (i < rowsNum - 1 && field[i][j] === field[i + 1][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction generateRandomNum() {\n  if (!hasEmptyCell()) {\n    return;\n  }\n\n  let rowIndex, cellIndex;\n\n  do {\n    rowIndex = random();\n    cellIndex = random();\n  } while (field[rowIndex][cellIndex] !== 0);\n\n  if (field[rowIndex][cellIndex] === 0) {\n    const value = Math.random() < 0.9 ? 2 : 4;\n    const cell = rows[rowIndex].children[cellIndex];\n\n    field[rowIndex][cellIndex] = value;\n    cell.textContent = value;\n    cell.classList.add(`field-cell--${value}`);\n  }\n}\n\nfunction updateTable() {\n  cells.forEach(el => {\n    el.textContent = '';\n    el.className = 'field-cell';\n  });\n\n  for (let i = 0; i < field.length; i++) {\n    for (let k = 0; k < field[i].length; k++) {\n      const cell = rows[i].children[k];\n      const value = field[i][k];\n\n      if (value !== 0) {\n        cell.textContent = value;\n        cell.classList.add(`field-cell--${value}`);\n      }\n    }\n  }\n\n  counter.textContent = score;\n  bestResult.textContent = best;\n}\n\nfunction slide(row) {\n  let copy = [...row];\n\n  copy = filterZero(copy);\n\n  for (let i = 0; i < copy.length - 1; i++) {\n    if (copy[i] === copy[i + 1]) {\n      copy[i] *= 2;\n      copy[i + 1] = 0;\n      score += copy[i];\n    }\n  }\n\n  copy = filterZero(copy);\n\n  while (copy.length < columnsNum) {\n    copy.push(0);\n  }\n\n  return copy;\n}\n\nfunction slideLeft() {\n  for (let i = 0; i < rowsNum; i++) {\n    let row = field[i];\n\n    row = slide(row);\n    field[i] = row;\n  }\n}\n\nfunction slideRight() {\n  for (let i = 0; i < rowsNum; i++) {\n    let row = field[i];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    field[i] = row;\n  }\n}\n\nfunction fieldCombine(cell, num, row) {\n  for (let r = 0; r <= num; r++) {\n    field[r][cell] = row[r];\n  }\n}\n\nfunction slideUp() {\n  for (let i = 0; i < columnsNum; i++) {\n    let row = [field[0][i], field[1][i], field[2][i], field[3][i]];\n\n    row = slide(row);\n    fieldCombine(i, 3, row);\n  }\n}\n\nfunction slideDown() {\n  for (let i = 0; i < columnsNum; i++) {\n    let row = [field[0][i], field[1][i], field[2][i], field[3][i]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    fieldCombine(i, 3, row);\n  }\n}\n\nbutton.addEventListener('click', () => {\n  if (!button.classList.contains('restart')) {\n    button.className = 'button restart';\n    button.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    field.forEach(el => el.fill(0));\n\n    if (score > best) {\n      best = score;\n      score = 0;\n    }\n\n    score = 0;\n    updateTable();\n    messageLose.classList.add('hidden');\n  }\n\n  handler = true;\n\n  generateRandomNum();\n  generateRandomNum();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (handler) {\n    e.preventDefault();\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        slideLeft();\n        generateRandomNum();\n        break;\n      case 'ArrowRight':\n        slideRight();\n        generateRandomNum();\n        break;\n      case 'ArrowUp':\n        slideUp();\n        generateRandomNum();\n        break;\n      case 'ArrowDown':\n        slideDown();\n        generateRandomNum();\n        break;\n    }\n\n    updateTable();\n\n    if (checkWin()) {\n      messageWin.classList.remove('hidden');\n      handler = false;\n    }\n\n    if (!hasEmptyCell() && !hasAdjacentTiles()) {\n      messageLose.classList.remove('hidden');\n      handler = false;\n    }\n  }\n});\n"]}